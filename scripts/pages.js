var pages = [{'name': 'fun <T> AND(block: () -> T): T', 'description':'io.redbee.stingkt.AND', 'location':'sting-kt/io.redbee.stingkt/-a-n-d.html', 'searchKey':'AND'},
{'name': 'class AssertBuilder<T : Scope>', 'description':'io.redbee.stingkt.AssertBuilder', 'location':'sting-kt/io.redbee.stingkt/-assert-builder/index.html', 'searchKey':'AssertBuilder'},
{'name': 'fun AssertBuilder()', 'description':'io.redbee.stingkt.AssertBuilder.AssertBuilder', 'location':'sting-kt/io.redbee.stingkt/-assert-builder/-assert-builder.html', 'searchKey':'AssertBuilder'},
{'name': 'fun assert(block: T.() -> Unit)', 'description':'io.redbee.stingkt.AssertBuilder.assert', 'location':'sting-kt/io.redbee.stingkt/-assert-builder/assert.html', 'searchKey':'assert'},
{'name': 'class CaseBuilder<T : Scope>', 'description':'io.redbee.stingkt.CaseBuilder', 'location':'sting-kt/io.redbee.stingkt/-case-builder/index.html', 'searchKey':'CaseBuilder'},
{'name': 'fun CaseBuilder()', 'description':'io.redbee.stingkt.CaseBuilder.CaseBuilder', 'location':'sting-kt/io.redbee.stingkt/-case-builder/-case-builder.html', 'searchKey':'CaseBuilder'},
{'name': 'fun <T> EXPECT(block: () -> T): T', 'description':'io.redbee.stingkt.EXPECT', 'location':'sting-kt/io.redbee.stingkt/-e-x-p-e-c-t.html', 'searchKey':'EXPECT'},
{'name': 'fun <T> GIVEN(block: () -> T): T', 'description':'io.redbee.stingkt.GIVEN', 'location':'sting-kt/io.redbee.stingkt/-g-i-v-e-n.html', 'searchKey':'GIVEN'},
{'name': 'inline fun <T : Scope> Scenario(block: ScenarioBuilder<T>.() -> Unit): List<DynamicTest>', 'description':'io.redbee.stingkt.Scenario', 'location':'sting-kt/io.redbee.stingkt/-scenario.html', 'searchKey':'Scenario'},
{'name': 'class ScenarioBuilder<T : Scope>', 'description':'io.redbee.stingkt.ScenarioBuilder', 'location':'sting-kt/io.redbee.stingkt/-scenario-builder/index.html', 'searchKey':'ScenarioBuilder'},
{'name': 'fun ScenarioBuilder()', 'description':'io.redbee.stingkt.ScenarioBuilder.ScenarioBuilder', 'location':'sting-kt/io.redbee.stingkt/-scenario-builder/-scenario-builder.html', 'searchKey':'ScenarioBuilder'},
{'name': 'inline fun Given(block: CaseBuilder<T>.() -> Unit): Boolean', 'description':'io.redbee.stingkt.ScenarioBuilder.Given', 'location':'sting-kt/io.redbee.stingkt/-scenario-builder/-given.html', 'searchKey':'Given'},
{'name': 'fun Then(block: AssertBuilder<T>.() -> Unit): Boolean', 'description':'io.redbee.stingkt.ScenarioBuilder.Then', 'location':'sting-kt/io.redbee.stingkt/-scenario-builder/-then.html', 'searchKey':'Then'},
{'name': 'fun When(block: T.() -> Any)', 'description':'io.redbee.stingkt.ScenarioBuilder.When', 'location':'sting-kt/io.redbee.stingkt/-scenario-builder/-when.html', 'searchKey':'When'},
{'name': 'fun build(): List<DynamicTest>', 'description':'io.redbee.stingkt.ScenarioBuilder.build', 'location':'sting-kt/io.redbee.stingkt/-scenario-builder/build.html', 'searchKey':'build'},
{'name': 'abstract class Scope(actual: Any?, exception: Throwable?)', 'description':'io.redbee.stingkt.Scope', 'location':'sting-kt/io.redbee.stingkt/-scope/index.html', 'searchKey':'Scope'},
{'name': 'fun Scope(actual: Any?, exception: Throwable?)', 'description':'io.redbee.stingkt.Scope.Scope', 'location':'sting-kt/io.redbee.stingkt/-scope/-scope.html', 'searchKey':'Scope'},
{'name': 'fun <T> THEN(block: () -> T): T', 'description':'io.redbee.stingkt.THEN', 'location':'sting-kt/io.redbee.stingkt/-t-h-e-n.html', 'searchKey':'THEN'},
{'name': 'class TestCase<T : Scope>(name: String, scope: T)', 'description':'io.redbee.stingkt.TestCase', 'location':'sting-kt/io.redbee.stingkt/-test-case/index.html', 'searchKey':'TestCase'},
{'name': 'fun <T : Scope> TestCase(name: String, scope: T)', 'description':'io.redbee.stingkt.TestCase.TestCase', 'location':'sting-kt/io.redbee.stingkt/-test-case/-test-case.html', 'searchKey':'TestCase'},
{'name': 'fun <T> WHEN(block: () -> T): T', 'description':'io.redbee.stingkt.WHEN', 'location':'sting-kt/io.redbee.stingkt/-w-h-e-n.html', 'searchKey':'WHEN'},
{'name': 'infix fun <T> T.assertTrue(block: (T) -> Pair<Boolean, String>)', 'description':'io.redbee.stingkt.assertTrue', 'location':'sting-kt/io.redbee.stingkt/assert-true.html', 'searchKey':'assertTrue'},
{'name': 'inline fun <T : Scope> CaseBuilder<T>.case(name: String, block: T.() -> Unit)', 'description':'io.redbee.stingkt.case', 'location':'sting-kt/io.redbee.stingkt/case.html', 'searchKey':'case'},
{'name': 'infix fun Any?.equals(expected: Any?)', 'description':'io.redbee.stingkt.equals', 'location':'sting-kt/io.redbee.stingkt/equals.html', 'searchKey':'equals'}]
